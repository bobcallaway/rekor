// Code generated by go-swagger; DO NOT EDIT.

// /*
// Copyright The Rekor Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
// */
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RekordFormat Specifies the format of the signature and/or public key
//
// swagger:model rekordFormat
type RekordFormat string

const (

	// RekordFormatPgp captures enum value "pgp"
	RekordFormatPgp RekordFormat = "pgp"

	// RekordFormatMinisign captures enum value "minisign"
	RekordFormatMinisign RekordFormat = "minisign"

	// RekordFormatX509 captures enum value "x509"
	RekordFormatX509 RekordFormat = "x509"
)

// for schema
var rekordFormatEnum []interface{}

func init() {
	var res []RekordFormat
	if err := json.Unmarshal([]byte(`["pgp","minisign","x509"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rekordFormatEnum = append(rekordFormatEnum, v)
	}
}

func (m RekordFormat) validateRekordFormatEnum(path, location string, value RekordFormat) error {
	if err := validate.EnumCase(path, location, value, rekordFormatEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this rekord format
func (m RekordFormat) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRekordFormatEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
