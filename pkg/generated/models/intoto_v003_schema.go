// Code generated by go-swagger; DO NOT EDIT.

//
// Copyright 2021 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntotoV003Schema intoto v0.0.3 Schema
//
// # Schema for intoto object
//
// swagger:model intotoV003Schema
type IntotoV003Schema struct {

	// envelope hash
	EnvelopeHash *IntotoV003SchemaEnvelopeHash `json:"envelopeHash,omitempty"`

	// payload hash
	PayloadHash *IntotoV003SchemaPayloadHash `json:"payloadHash,omitempty"`

	// proposed content
	ProposedContent *IntotoV003SchemaProposedContent `json:"proposedContent,omitempty"`

	// extracted collection of all signatures of the envelope's payload; elements will be sorted by lexicographical order of the base64 encoded signature strings
	// Read Only: true
	// Min Items: 1
	Signatures []*IntotoV003SchemaSignaturesItems0 `json:"signatures"`
}

// Validate validates this intoto v003 schema
func (m *IntotoV003Schema) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvelopeHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePayloadHash(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProposedContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignatures(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntotoV003Schema) validateEnvelopeHash(formats strfmt.Registry) error {
	if swag.IsZero(m.EnvelopeHash) { // not required
		return nil
	}

	if m.EnvelopeHash != nil {
		if err := m.EnvelopeHash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("envelopeHash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("envelopeHash")
			}
			return err
		}
	}

	return nil
}

func (m *IntotoV003Schema) validatePayloadHash(formats strfmt.Registry) error {
	if swag.IsZero(m.PayloadHash) { // not required
		return nil
	}

	if m.PayloadHash != nil {
		if err := m.PayloadHash.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payloadHash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payloadHash")
			}
			return err
		}
	}

	return nil
}

func (m *IntotoV003Schema) validateProposedContent(formats strfmt.Registry) error {
	if swag.IsZero(m.ProposedContent) { // not required
		return nil
	}

	if m.ProposedContent != nil {
		if err := m.ProposedContent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposedContent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposedContent")
			}
			return err
		}
	}

	return nil
}

func (m *IntotoV003Schema) validateSignatures(formats strfmt.Registry) error {
	if swag.IsZero(m.Signatures) { // not required
		return nil
	}

	iSignaturesSize := int64(len(m.Signatures))

	if err := validate.MinItems("signatures", "body", iSignaturesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Signatures); i++ {
		if swag.IsZero(m.Signatures[i]) { // not required
			continue
		}

		if m.Signatures[i] != nil {
			if err := m.Signatures[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signatures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this intoto v003 schema based on the context it is used
func (m *IntotoV003Schema) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEnvelopeHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePayloadHash(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProposedContent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSignatures(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntotoV003Schema) contextValidateEnvelopeHash(ctx context.Context, formats strfmt.Registry) error {

	if m.EnvelopeHash != nil {
		if err := m.EnvelopeHash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("envelopeHash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("envelopeHash")
			}
			return err
		}
	}

	return nil
}

func (m *IntotoV003Schema) contextValidatePayloadHash(ctx context.Context, formats strfmt.Registry) error {

	if m.PayloadHash != nil {
		if err := m.PayloadHash.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("payloadHash")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("payloadHash")
			}
			return err
		}
	}

	return nil
}

func (m *IntotoV003Schema) contextValidateProposedContent(ctx context.Context, formats strfmt.Registry) error {

	if m.ProposedContent != nil {
		if err := m.ProposedContent.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("proposedContent")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("proposedContent")
			}
			return err
		}
	}

	return nil
}

func (m *IntotoV003Schema) contextValidateSignatures(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "signatures", "body", []*IntotoV003SchemaSignaturesItems0(m.Signatures)); err != nil {
		return err
	}

	for i := 0; i < len(m.Signatures); i++ {

		if m.Signatures[i] != nil {
			if err := m.Signatures[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("signatures" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("signatures" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IntotoV003Schema) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntotoV003Schema) UnmarshalBinary(b []byte) error {
	var res IntotoV003Schema
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IntotoV003SchemaEnvelopeHash Specifies the hash algorithm and value encompassing the entire envelope sent to Rekor
//
// swagger:model IntotoV003SchemaEnvelopeHash
type IntotoV003SchemaEnvelopeHash struct {

	// The hashing function used to compute the hash value
	// Required: true
	// Enum: [sha256]
	Algorithm *string `json:"algorithm"`

	// The value of the computed digest over the entire envelope
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this intoto v003 schema envelope hash
func (m *IntotoV003SchemaEnvelopeHash) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var intotoV003SchemaEnvelopeHashTypeAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intotoV003SchemaEnvelopeHashTypeAlgorithmPropEnum = append(intotoV003SchemaEnvelopeHashTypeAlgorithmPropEnum, v)
	}
}

const (

	// IntotoV003SchemaEnvelopeHashAlgorithmSha256 captures enum value "sha256"
	IntotoV003SchemaEnvelopeHashAlgorithmSha256 string = "sha256"
)

// prop value enum
func (m *IntotoV003SchemaEnvelopeHash) validateAlgorithmEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intotoV003SchemaEnvelopeHashTypeAlgorithmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntotoV003SchemaEnvelopeHash) validateAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("envelopeHash"+"."+"algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlgorithmEnum("envelopeHash"+"."+"algorithm", "body", *m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *IntotoV003SchemaEnvelopeHash) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("envelopeHash"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this intoto v003 schema envelope hash based on the context it is used
func (m *IntotoV003SchemaEnvelopeHash) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IntotoV003SchemaEnvelopeHash) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntotoV003SchemaEnvelopeHash) UnmarshalBinary(b []byte) error {
	var res IntotoV003SchemaEnvelopeHash
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IntotoV003SchemaPayloadHash Specifies the hash algorithm and value covering the payload within the DSSE envelope
//
// swagger:model IntotoV003SchemaPayloadHash
type IntotoV003SchemaPayloadHash struct {

	// The hashing function used to compute the hash value
	// Required: true
	// Enum: [sha256]
	Algorithm *string `json:"algorithm"`

	// The value of the computed digest over the payload within the envelope
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this intoto v003 schema payload hash
func (m *IntotoV003SchemaPayloadHash) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlgorithm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var intotoV003SchemaPayloadHashTypeAlgorithmPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["sha256"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		intotoV003SchemaPayloadHashTypeAlgorithmPropEnum = append(intotoV003SchemaPayloadHashTypeAlgorithmPropEnum, v)
	}
}

const (

	// IntotoV003SchemaPayloadHashAlgorithmSha256 captures enum value "sha256"
	IntotoV003SchemaPayloadHashAlgorithmSha256 string = "sha256"
)

// prop value enum
func (m *IntotoV003SchemaPayloadHash) validateAlgorithmEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, intotoV003SchemaPayloadHashTypeAlgorithmPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntotoV003SchemaPayloadHash) validateAlgorithm(formats strfmt.Registry) error {

	if err := validate.Required("payloadHash"+"."+"algorithm", "body", m.Algorithm); err != nil {
		return err
	}

	// value enum
	if err := m.validateAlgorithmEnum("payloadHash"+"."+"algorithm", "body", *m.Algorithm); err != nil {
		return err
	}

	return nil
}

func (m *IntotoV003SchemaPayloadHash) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("payloadHash"+"."+"value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this intoto v003 schema payload hash based on the context it is used
func (m *IntotoV003SchemaPayloadHash) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *IntotoV003SchemaPayloadHash) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntotoV003SchemaPayloadHash) UnmarshalBinary(b []byte) error {
	var res IntotoV003SchemaPayloadHash
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IntotoV003SchemaProposedContent intoto v003 schema proposed content
//
// swagger:model IntotoV003SchemaProposedContent
type IntotoV003SchemaProposedContent struct {

	// DSSE envelope specified as a stringified JSON object; payloadType in the envelope MUST be set to 'application/vnd.in-toto+json'
	// Required: true
	Envelope *string `json:"envelope"`

	// collection of all public keys used to verify signatures over envelope's payload
	// Required: true
	// Min Items: 1
	PublicKeys []strfmt.Base64 `json:"publicKeys"`
}

// Validate validates this intoto v003 schema proposed content
func (m *IntotoV003SchemaProposedContent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvelope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKeys(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntotoV003SchemaProposedContent) validateEnvelope(formats strfmt.Registry) error {

	if err := validate.Required("proposedContent"+"."+"envelope", "body", m.Envelope); err != nil {
		return err
	}

	return nil
}

func (m *IntotoV003SchemaProposedContent) validatePublicKeys(formats strfmt.Registry) error {

	if err := validate.Required("proposedContent"+"."+"publicKeys", "body", m.PublicKeys); err != nil {
		return err
	}

	iPublicKeysSize := int64(len(m.PublicKeys))

	if err := validate.MinItems("proposedContent"+"."+"publicKeys", "body", iPublicKeysSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this intoto v003 schema proposed content based on context it is used
func (m *IntotoV003SchemaProposedContent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IntotoV003SchemaProposedContent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntotoV003SchemaProposedContent) UnmarshalBinary(b []byte) error {
	var res IntotoV003SchemaProposedContent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// IntotoV003SchemaSignaturesItems0 a signature of the envelope's payload along with the public key for the signature
//
// swagger:model IntotoV003SchemaSignaturesItems0
type IntotoV003SchemaSignaturesItems0 struct {

	// public key that was used to verify the corresponding signature
	// Required: true
	// Format: byte
	PublicKey *strfmt.Base64 `json:"publicKey"`

	// base64 encoded signature of the payload
	// Required: true
	// Pattern: ^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$
	Signature *string `json:"signature"`
}

// Validate validates this intoto v003 schema signatures items0
func (m *IntotoV003SchemaSignaturesItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IntotoV003SchemaSignaturesItems0) validatePublicKey(formats strfmt.Registry) error {

	if err := validate.Required("publicKey", "body", m.PublicKey); err != nil {
		return err
	}

	return nil
}

func (m *IntotoV003SchemaSignaturesItems0) validateSignature(formats strfmt.Registry) error {

	if err := validate.Required("signature", "body", m.Signature); err != nil {
		return err
	}

	if err := validate.Pattern("signature", "body", *m.Signature, `^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=|[A-Za-z0-9+\/]{4})$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this intoto v003 schema signatures items0 based on context it is used
func (m *IntotoV003SchemaSignaturesItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IntotoV003SchemaSignaturesItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntotoV003SchemaSignaturesItems0) UnmarshalBinary(b []byte) error {
	var res IntotoV003SchemaSignaturesItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
