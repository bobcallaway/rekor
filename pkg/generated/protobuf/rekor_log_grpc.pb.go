// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LogClient is the client API for Log service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LogClient interface {
	//*
	// Returns information about the current state of the transparency log
	GetLogInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogInfo, error)
	//*
	// Returns the public key that can be used to validate the signed tree head
	GetLogPublicKey(ctx context.Context, in *GetLogPublicKeyRequest, opts ...grpc.CallOption) (*LogPublicKey, error)
	//*
	// Returns a consistency proof for the log between two points
	GetConsistencyProof(ctx context.Context, in *GetConsistencyProofRequest, opts ...grpc.CallOption) (*ConsistencyProof, error)
}

type logClient struct {
	cc grpc.ClientConnInterface
}

func NewLogClient(cc grpc.ClientConnInterface) LogClient {
	return &logClient{cc}
}

func (c *logClient) GetLogInfo(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*LogInfo, error) {
	out := new(LogInfo)
	err := c.cc.Invoke(ctx, "/dev.sigstore.rekor.v2.Log/GetLogInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) GetLogPublicKey(ctx context.Context, in *GetLogPublicKeyRequest, opts ...grpc.CallOption) (*LogPublicKey, error) {
	out := new(LogPublicKey)
	err := c.cc.Invoke(ctx, "/dev.sigstore.rekor.v2.Log/GetLogPublicKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *logClient) GetConsistencyProof(ctx context.Context, in *GetConsistencyProofRequest, opts ...grpc.CallOption) (*ConsistencyProof, error) {
	out := new(ConsistencyProof)
	err := c.cc.Invoke(ctx, "/dev.sigstore.rekor.v2.Log/GetConsistencyProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LogServer is the server API for Log service.
// All implementations must embed UnimplementedLogServer
// for forward compatibility
type LogServer interface {
	//*
	// Returns information about the current state of the transparency log
	GetLogInfo(context.Context, *empty.Empty) (*LogInfo, error)
	//*
	// Returns the public key that can be used to validate the signed tree head
	GetLogPublicKey(context.Context, *GetLogPublicKeyRequest) (*LogPublicKey, error)
	//*
	// Returns a consistency proof for the log between two points
	GetConsistencyProof(context.Context, *GetConsistencyProofRequest) (*ConsistencyProof, error)
	mustEmbedUnimplementedLogServer()
}

// UnimplementedLogServer must be embedded to have forward compatible implementations.
type UnimplementedLogServer struct {
}

func (UnimplementedLogServer) GetLogInfo(context.Context, *empty.Empty) (*LogInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogInfo not implemented")
}
func (UnimplementedLogServer) GetLogPublicKey(context.Context, *GetLogPublicKeyRequest) (*LogPublicKey, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogPublicKey not implemented")
}
func (UnimplementedLogServer) GetConsistencyProof(context.Context, *GetConsistencyProofRequest) (*ConsistencyProof, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsistencyProof not implemented")
}
func (UnimplementedLogServer) mustEmbedUnimplementedLogServer() {}

// UnsafeLogServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LogServer will
// result in compilation errors.
type UnsafeLogServer interface {
	mustEmbedUnimplementedLogServer()
}

func RegisterLogServer(s grpc.ServiceRegistrar, srv LogServer) {
	s.RegisterService(&Log_ServiceDesc, srv)
}

func _Log_GetLogInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).GetLogInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.sigstore.rekor.v2.Log/GetLogInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).GetLogInfo(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_GetLogPublicKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogPublicKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).GetLogPublicKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.sigstore.rekor.v2.Log/GetLogPublicKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).GetLogPublicKey(ctx, req.(*GetLogPublicKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Log_GetConsistencyProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConsistencyProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LogServer).GetConsistencyProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.sigstore.rekor.v2.Log/GetConsistencyProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LogServer).GetConsistencyProof(ctx, req.(*GetConsistencyProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Log_ServiceDesc is the grpc.ServiceDesc for Log service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Log_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.sigstore.rekor.v2.Log",
	HandlerType: (*LogServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLogInfo",
			Handler:    _Log_GetLogInfo_Handler,
		},
		{
			MethodName: "GetLogPublicKey",
			Handler:    _Log_GetLogPublicKey_Handler,
		},
		{
			MethodName: "GetConsistencyProof",
			Handler:    _Log_GetConsistencyProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rekor_log.proto",
}
