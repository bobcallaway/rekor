//
// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: rekor_common.proto

package common

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PKIAlgorithm int32

const (
	PKIAlgorithm_PKI_ALGORITHM_UNSPECIFIED PKIAlgorithm = 0
	PKIAlgorithm_PGP                       PKIAlgorithm = 1
	PKIAlgorithm_MINISIGN                  PKIAlgorithm = 2
	PKIAlgorithm_X509                      PKIAlgorithm = 3
	PKIAlgorithm_SSH                       PKIAlgorithm = 4
	PKIAlgorithm_PKCS7                     PKIAlgorithm = 5
	PKIAlgorithm_TUF                       PKIAlgorithm = 6
)

// Enum value maps for PKIAlgorithm.
var (
	PKIAlgorithm_name = map[int32]string{
		0: "PKI_ALGORITHM_UNSPECIFIED",
		1: "PGP",
		2: "MINISIGN",
		3: "X509",
		4: "SSH",
		5: "PKCS7",
		6: "TUF",
	}
	PKIAlgorithm_value = map[string]int32{
		"PKI_ALGORITHM_UNSPECIFIED": 0,
		"PGP":                       1,
		"MINISIGN":                  2,
		"X509":                      3,
		"SSH":                       4,
		"PKCS7":                     5,
		"TUF":                       6,
	}
)

func (x PKIAlgorithm) Enum() *PKIAlgorithm {
	p := new(PKIAlgorithm)
	*p = x
	return p
}

func (x PKIAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PKIAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_rekor_common_proto_enumTypes[0].Descriptor()
}

func (PKIAlgorithm) Type() protoreflect.EnumType {
	return &file_rekor_common_proto_enumTypes[0]
}

func (x PKIAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PKIAlgorithm.Descriptor instead.
func (PKIAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_rekor_common_proto_rawDescGZIP(), []int{0}
}

type HashAlgorithm int32

const (
	HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED HashAlgorithm = 0
	HashAlgorithm_SHA256                     HashAlgorithm = 1
)

// Enum value maps for HashAlgorithm.
var (
	HashAlgorithm_name = map[int32]string{
		0: "HASH_ALGORITHM_UNSPECIFIED",
		1: "SHA256",
	}
	HashAlgorithm_value = map[string]int32{
		"HASH_ALGORITHM_UNSPECIFIED": 0,
		"SHA256":                     1,
	}
)

func (x HashAlgorithm) Enum() *HashAlgorithm {
	p := new(HashAlgorithm)
	*p = x
	return p
}

func (x HashAlgorithm) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HashAlgorithm) Descriptor() protoreflect.EnumDescriptor {
	return file_rekor_common_proto_enumTypes[1].Descriptor()
}

func (HashAlgorithm) Type() protoreflect.EnumType {
	return &file_rekor_common_proto_enumTypes[1]
}

func (x HashAlgorithm) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HashAlgorithm.Descriptor instead.
func (HashAlgorithm) EnumDescriptor() ([]byte, []int) {
	return file_rekor_common_proto_rawDescGZIP(), []int{1}
}

type Signature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// The crypto algorithm used to generate the signature
	Algorithm PKIAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=dev.sigstore.rekor.v2.common.PKIAlgorithm" json:"algorithm,omitempty"`
	//
	// The value of the digital signature
	Content []byte `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
	//
	// The public key that can be used to verify the signature
	PublicKey *PublicKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *Signature) Reset() {
	*x = Signature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rekor_common_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Signature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Signature) ProtoMessage() {}

func (x *Signature) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_common_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Signature.ProtoReflect.Descriptor instead.
func (*Signature) Descriptor() ([]byte, []int) {
	return file_rekor_common_proto_rawDescGZIP(), []int{0}
}

func (x *Signature) GetAlgorithm() PKIAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return PKIAlgorithm_PKI_ALGORITHM_UNSPECIFIED
}

func (x *Signature) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Signature) GetPublicKey() *PublicKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type PublicKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// The public key
	Content []byte `protobuf:"bytes,1,opt,name=content,proto3" json:"content,omitempty"`
}

func (x *PublicKey) Reset() {
	*x = PublicKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rekor_common_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKey) ProtoMessage() {}

func (x *PublicKey) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_common_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKey.ProtoReflect.Descriptor instead.
func (*PublicKey) Descriptor() ([]byte, []int) {
	return file_rekor_common_proto_rawDescGZIP(), []int{1}
}

func (x *PublicKey) GetContent() []byte {
	if x != nil {
		return x.Content
	}
	return nil
}

type Hash struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// The hash algorithm used to compute the value
	Algorithm HashAlgorithm `protobuf:"varint,1,opt,name=algorithm,proto3,enum=dev.sigstore.rekor.v2.common.HashAlgorithm" json:"algorithm,omitempty"`
	//
	// The value of the digest, in hexadecimal format
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Hash) Reset() {
	*x = Hash{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rekor_common_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Hash) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Hash) ProtoMessage() {}

func (x *Hash) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_common_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Hash.ProtoReflect.Descriptor instead.
func (*Hash) Descriptor() ([]byte, []int) {
	return file_rekor_common_proto_rawDescGZIP(), []int{2}
}

func (x *Hash) GetAlgorithm() HashAlgorithm {
	if x != nil {
		return x.Algorithm
	}
	return HashAlgorithm_HASH_ALGORITHM_UNSPECIFIED
}

func (x *Hash) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_rekor_common_proto protoreflect.FileDescriptor

var file_rekor_common_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x22, 0xb7, 0x01, 0x0a, 0x09, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x48, 0x0a, 0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2e, 0x50, 0x4b, 0x49, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52,
	0x09, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x76, 0x32,
	0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22, 0x25, 0x0a, 0x09,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x22, 0x67, 0x0a, 0x04, 0x48, 0x61, 0x73, 0x68, 0x12, 0x49, 0x0a, 0x09, 0x61,
	0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65,
	0x6b, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x48, 0x61,
	0x73, 0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x52, 0x09, 0x61, 0x6c, 0x67,
	0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2a, 0x6b, 0x0a, 0x0c,
	0x50, 0x4b, 0x49, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1d, 0x0a, 0x19,
	0x50, 0x4b, 0x49, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x50,
	0x47, 0x50, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x49, 0x4e, 0x49, 0x53, 0x49, 0x47, 0x4e,
	0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x58, 0x35, 0x30, 0x39, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x53, 0x48, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x4b, 0x43, 0x53, 0x37, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x54, 0x55, 0x46, 0x10, 0x06, 0x2a, 0x3b, 0x0a, 0x0d, 0x48, 0x61, 0x73,
	0x68, 0x41, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x12, 0x1e, 0x0a, 0x1a, 0x48, 0x41,
	0x53, 0x48, 0x5f, 0x41, 0x4c, 0x47, 0x4f, 0x52, 0x49, 0x54, 0x48, 0x4d, 0x5f, 0x55, 0x4e, 0x53,
	0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48,
	0x41, 0x32, 0x35, 0x36, 0x10, 0x01, 0x42, 0x6b, 0x0a, 0x1c, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69,
	0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x76, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x42, 0x10, 0x52, 0x65, 0x6b, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x37, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x74, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x63, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rekor_common_proto_rawDescOnce sync.Once
	file_rekor_common_proto_rawDescData = file_rekor_common_proto_rawDesc
)

func file_rekor_common_proto_rawDescGZIP() []byte {
	file_rekor_common_proto_rawDescOnce.Do(func() {
		file_rekor_common_proto_rawDescData = protoimpl.X.CompressGZIP(file_rekor_common_proto_rawDescData)
	})
	return file_rekor_common_proto_rawDescData
}

var file_rekor_common_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_rekor_common_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_rekor_common_proto_goTypes = []interface{}{
	(PKIAlgorithm)(0),  // 0: dev.sigstore.rekor.v2.common.PKIAlgorithm
	(HashAlgorithm)(0), // 1: dev.sigstore.rekor.v2.common.HashAlgorithm
	(*Signature)(nil),  // 2: dev.sigstore.rekor.v2.common.Signature
	(*PublicKey)(nil),  // 3: dev.sigstore.rekor.v2.common.PublicKey
	(*Hash)(nil),       // 4: dev.sigstore.rekor.v2.common.Hash
}
var file_rekor_common_proto_depIdxs = []int32{
	0, // 0: dev.sigstore.rekor.v2.common.Signature.algorithm:type_name -> dev.sigstore.rekor.v2.common.PKIAlgorithm
	3, // 1: dev.sigstore.rekor.v2.common.Signature.public_key:type_name -> dev.sigstore.rekor.v2.common.PublicKey
	1, // 2: dev.sigstore.rekor.v2.common.Hash.algorithm:type_name -> dev.sigstore.rekor.v2.common.HashAlgorithm
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_rekor_common_proto_init() }
func file_rekor_common_proto_init() {
	if File_rekor_common_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rekor_common_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Signature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rekor_common_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rekor_common_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Hash); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rekor_common_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_rekor_common_proto_goTypes,
		DependencyIndexes: file_rekor_common_proto_depIdxs,
		EnumInfos:         file_rekor_common_proto_enumTypes,
		MessageInfos:      file_rekor_common_proto_msgTypes,
	}.Build()
	File_rekor_common_proto = out.File
	file_rekor_common_proto_rawDesc = nil
	file_rekor_common_proto_goTypes = nil
	file_rekor_common_proto_depIdxs = nil
}
