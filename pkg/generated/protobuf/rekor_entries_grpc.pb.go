// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EntriesClient is the client API for Entries service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EntriesClient interface {
	//*
	// Creates an entry in the transparency log for an artifact.
	CreateLogEntry(ctx context.Context, in *CreateLogEntryRequest, opts ...grpc.CallOption) (*LogEntry, error)
	//*
	// Retrieves an entry and inclusion proof from the transparency log (if it exists)
	GetLogEntry(ctx context.Context, in *GetLogEntryRequest, opts ...grpc.CallOption) (*LogEntry, error)
	//*
	// Returns a list of (optionally filtered) entries from the transparency log
	ListLogEntries(ctx context.Context, in *ListLogEntriesRequest, opts ...grpc.CallOption) (*ListLogEntriesResponse, error)
}

type entriesClient struct {
	cc grpc.ClientConnInterface
}

func NewEntriesClient(cc grpc.ClientConnInterface) EntriesClient {
	return &entriesClient{cc}
}

func (c *entriesClient) CreateLogEntry(ctx context.Context, in *CreateLogEntryRequest, opts ...grpc.CallOption) (*LogEntry, error) {
	out := new(LogEntry)
	err := c.cc.Invoke(ctx, "/dev.sigstore.rekor.v2.Entries/CreateLogEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) GetLogEntry(ctx context.Context, in *GetLogEntryRequest, opts ...grpc.CallOption) (*LogEntry, error) {
	out := new(LogEntry)
	err := c.cc.Invoke(ctx, "/dev.sigstore.rekor.v2.Entries/GetLogEntry", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *entriesClient) ListLogEntries(ctx context.Context, in *ListLogEntriesRequest, opts ...grpc.CallOption) (*ListLogEntriesResponse, error) {
	out := new(ListLogEntriesResponse)
	err := c.cc.Invoke(ctx, "/dev.sigstore.rekor.v2.Entries/ListLogEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EntriesServer is the server API for Entries service.
// All implementations must embed UnimplementedEntriesServer
// for forward compatibility
type EntriesServer interface {
	//*
	// Creates an entry in the transparency log for an artifact.
	CreateLogEntry(context.Context, *CreateLogEntryRequest) (*LogEntry, error)
	//*
	// Retrieves an entry and inclusion proof from the transparency log (if it exists)
	GetLogEntry(context.Context, *GetLogEntryRequest) (*LogEntry, error)
	//*
	// Returns a list of (optionally filtered) entries from the transparency log
	ListLogEntries(context.Context, *ListLogEntriesRequest) (*ListLogEntriesResponse, error)
	mustEmbedUnimplementedEntriesServer()
}

// UnimplementedEntriesServer must be embedded to have forward compatible implementations.
type UnimplementedEntriesServer struct {
}

func (UnimplementedEntriesServer) CreateLogEntry(context.Context, *CreateLogEntryRequest) (*LogEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLogEntry not implemented")
}
func (UnimplementedEntriesServer) GetLogEntry(context.Context, *GetLogEntryRequest) (*LogEntry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogEntry not implemented")
}
func (UnimplementedEntriesServer) ListLogEntries(context.Context, *ListLogEntriesRequest) (*ListLogEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLogEntries not implemented")
}
func (UnimplementedEntriesServer) mustEmbedUnimplementedEntriesServer() {}

// UnsafeEntriesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EntriesServer will
// result in compilation errors.
type UnsafeEntriesServer interface {
	mustEmbedUnimplementedEntriesServer()
}

func RegisterEntriesServer(s grpc.ServiceRegistrar, srv EntriesServer) {
	s.RegisterService(&Entries_ServiceDesc, srv)
}

func _Entries_CreateLogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).CreateLogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.sigstore.rekor.v2.Entries/CreateLogEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).CreateLogEntry(ctx, req.(*CreateLogEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_GetLogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).GetLogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.sigstore.rekor.v2.Entries/GetLogEntry",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).GetLogEntry(ctx, req.(*GetLogEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Entries_ListLogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EntriesServer).ListLogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.sigstore.rekor.v2.Entries/ListLogEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EntriesServer).ListLogEntries(ctx, req.(*ListLogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Entries_ServiceDesc is the grpc.ServiceDesc for Entries service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Entries_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.sigstore.rekor.v2.Entries",
	HandlerType: (*EntriesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLogEntry",
			Handler:    _Entries_CreateLogEntry_Handler,
		},
		{
			MethodName: "GetLogEntry",
			Handler:    _Entries_GetLogEntry_Handler,
		},
		{
			MethodName: "ListLogEntries",
			Handler:    _Entries_ListLogEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rekor_entries.proto",
}
