//
// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: pkg/types/rpm/rpm.proto

package rpm

import (
	v1 "github.com/sigstore/rekor/pkg/generated/protobuf/types/rpm/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// ProposedRPMPackage represents the structure of the message required to present to Rekor
// to make an entry of the RPMPackage type.
type ProposedRPMPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProposedRpmPackage:
	//	*ProposedRPMPackage_ProposedRpmPackageV1
	ProposedRpmPackage isProposedRPMPackage_ProposedRpmPackage `protobuf_oneof:"proposed_rpm_package"`
}

func (x *ProposedRPMPackage) Reset() {
	*x = ProposedRPMPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_rpm_rpm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposedRPMPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposedRPMPackage) ProtoMessage() {}

func (x *ProposedRPMPackage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_rpm_rpm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposedRPMPackage.ProtoReflect.Descriptor instead.
func (*ProposedRPMPackage) Descriptor() ([]byte, []int) {
	return file_pkg_types_rpm_rpm_proto_rawDescGZIP(), []int{0}
}

func (m *ProposedRPMPackage) GetProposedRpmPackage() isProposedRPMPackage_ProposedRpmPackage {
	if m != nil {
		return m.ProposedRpmPackage
	}
	return nil
}

func (x *ProposedRPMPackage) GetProposedRpmPackageV1() *v1.ProposedRPMPackage {
	if x, ok := x.GetProposedRpmPackage().(*ProposedRPMPackage_ProposedRpmPackageV1); ok {
		return x.ProposedRpmPackageV1
	}
	return nil
}

type isProposedRPMPackage_ProposedRpmPackage interface {
	isProposedRPMPackage_ProposedRpmPackage()
}

type ProposedRPMPackage_ProposedRpmPackageV1 struct {
	ProposedRpmPackageV1 *v1.ProposedRPMPackage `protobuf:"bytes,1,opt,name=proposed_rpm_package_v1,json=proposedRpmPackageV1,proto3,oneof"`
}

func (*ProposedRPMPackage_ProposedRpmPackageV1) isProposedRPMPackage_ProposedRpmPackage() {}

//
// RPMPackage represents the structure of the entry persisted in the transparency log for
// the RPMPackage type.
type RPMPackage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProposedRpmPackage:
	//	*RPMPackage_RpmPackageV1
	ProposedRpmPackage isRPMPackage_ProposedRpmPackage `protobuf_oneof:"proposed_rpm_package"`
}

func (x *RPMPackage) Reset() {
	*x = RPMPackage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_rpm_rpm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RPMPackage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RPMPackage) ProtoMessage() {}

func (x *RPMPackage) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_rpm_rpm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RPMPackage.ProtoReflect.Descriptor instead.
func (*RPMPackage) Descriptor() ([]byte, []int) {
	return file_pkg_types_rpm_rpm_proto_rawDescGZIP(), []int{1}
}

func (m *RPMPackage) GetProposedRpmPackage() isRPMPackage_ProposedRpmPackage {
	if m != nil {
		return m.ProposedRpmPackage
	}
	return nil
}

func (x *RPMPackage) GetRpmPackageV1() *v1.RPMPackage {
	if x, ok := x.GetProposedRpmPackage().(*RPMPackage_RpmPackageV1); ok {
		return x.RpmPackageV1
	}
	return nil
}

type isRPMPackage_ProposedRpmPackage interface {
	isRPMPackage_ProposedRpmPackage()
}

type RPMPackage_RpmPackageV1 struct {
	RpmPackageV1 *v1.RPMPackage `protobuf:"bytes,1,opt,name=rpm_package_v1,json=rpmPackageV1,proto3,oneof"`
}

func (*RPMPackage_RpmPackageV1) isRPMPackage_ProposedRpmPackage() {}

var File_pkg_types_rpm_rpm_proto protoreflect.FileDescriptor

var file_pkg_types_rpm_rpm_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x70, 0x6d, 0x2f,
	0x72, 0x70, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x64, 0x65, 0x76, 0x2e, 0x73,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x1a, 0x1a, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x72, 0x70, 0x6d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x70, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x9a, 0x01, 0x0a, 0x12, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x52, 0x50, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x6c, 0x0a, 0x17, 0x70, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x76, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x64, 0x65,
	0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72,
	0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x50, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x70, 0x6d, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x56, 0x31, 0x42, 0x16, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x22, 0x79, 0x0a, 0x0a, 0x52, 0x50, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x53,
	0x0a, 0x0e, 0x72, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x76, 0x31,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x72, 0x70, 0x6d, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x50, 0x4d, 0x50, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x70, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x56, 0x31, 0x42, 0x16, 0x0a, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f,
	0x72, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x42, 0x66, 0x0a, 0x1c, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f,
	0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x42, 0x08, 0x52, 0x50, 0x4d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x3a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x6b,
	0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f,
	0x72, 0x70, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_types_rpm_rpm_proto_rawDescOnce sync.Once
	file_pkg_types_rpm_rpm_proto_rawDescData = file_pkg_types_rpm_rpm_proto_rawDesc
)

func file_pkg_types_rpm_rpm_proto_rawDescGZIP() []byte {
	file_pkg_types_rpm_rpm_proto_rawDescOnce.Do(func() {
		file_pkg_types_rpm_rpm_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_types_rpm_rpm_proto_rawDescData)
	})
	return file_pkg_types_rpm_rpm_proto_rawDescData
}

var file_pkg_types_rpm_rpm_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_types_rpm_rpm_proto_goTypes = []interface{}{
	(*ProposedRPMPackage)(nil),    // 0: dev.sigstore.rekor.types.rpm.ProposedRPMPackage
	(*RPMPackage)(nil),            // 1: dev.sigstore.rekor.types.rpm.RPMPackage
	(*v1.ProposedRPMPackage)(nil), // 2: dev.sigstore.rekor.types.rpm.v1.ProposedRPMPackage
	(*v1.RPMPackage)(nil),         // 3: dev.sigstore.rekor.types.rpm.v1.RPMPackage
}
var file_pkg_types_rpm_rpm_proto_depIdxs = []int32{
	2, // 0: dev.sigstore.rekor.types.rpm.ProposedRPMPackage.proposed_rpm_package_v1:type_name -> dev.sigstore.rekor.types.rpm.v1.ProposedRPMPackage
	3, // 1: dev.sigstore.rekor.types.rpm.RPMPackage.rpm_package_v1:type_name -> dev.sigstore.rekor.types.rpm.v1.RPMPackage
	2, // [2:2] is the sub-list for method output_type
	2, // [2:2] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_pkg_types_rpm_rpm_proto_init() }
func file_pkg_types_rpm_rpm_proto_init() {
	if File_pkg_types_rpm_rpm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_types_rpm_rpm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposedRPMPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_rpm_rpm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RPMPackage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_types_rpm_rpm_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProposedRPMPackage_ProposedRpmPackageV1)(nil),
	}
	file_pkg_types_rpm_rpm_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RPMPackage_RpmPackageV1)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_types_rpm_rpm_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_types_rpm_rpm_proto_goTypes,
		DependencyIndexes: file_pkg_types_rpm_rpm_proto_depIdxs,
		MessageInfos:      file_pkg_types_rpm_rpm_proto_msgTypes,
	}.Build()
	File_pkg_types_rpm_rpm_proto = out.File
	file_pkg_types_rpm_rpm_proto_rawDesc = nil
	file_pkg_types_rpm_rpm_proto_goTypes = nil
	file_pkg_types_rpm_rpm_proto_depIdxs = nil
}
