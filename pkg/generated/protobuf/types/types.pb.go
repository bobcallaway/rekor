//
// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.12.4
// source: pkg/types/types.proto

package types

import (
	alpine "github.com/sigstore/rekor/pkg/generated/protobuf/types/alpine"
	hashedrekord "github.com/sigstore/rekor/pkg/generated/protobuf/types/hashedrekord"
	helm "github.com/sigstore/rekor/pkg/generated/protobuf/types/helm"
	jar "github.com/sigstore/rekor/pkg/generated/protobuf/types/jar"
	rekord "github.com/sigstore/rekor/pkg/generated/protobuf/types/rekord"
	rfc3161 "github.com/sigstore/rekor/pkg/generated/protobuf/types/rfc3161"
	rpm "github.com/sigstore/rekor/pkg/generated/protobuf/types/rpm"
	tuf "github.com/sigstore/rekor/pkg/generated/protobuf/types/tuf"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//
// Represents a proposed log entry; this is built on a oneof to help
type ProposedLogEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ProposedLogEntry:
	//	*ProposedLogEntry_ProposedHashedRekord
	//	*ProposedLogEntry_ProposedRekord
	//	*ProposedLogEntry_ProposedAlpinePackage
	//	*ProposedLogEntry_ProposedHelmChart
	//	*ProposedLogEntry_ProposedJar
	//	*ProposedLogEntry_ProposedTimestampResponse
	//	*ProposedLogEntry_ProposedRpmPackage
	//	*ProposedLogEntry_ProposedTufMetadata
	ProposedLogEntry isProposedLogEntry_ProposedLogEntry `protobuf_oneof:"proposed_log_entry"`
}

func (x *ProposedLogEntry) Reset() {
	*x = ProposedLogEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProposedLogEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProposedLogEntry) ProtoMessage() {}

func (x *ProposedLogEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProposedLogEntry.ProtoReflect.Descriptor instead.
func (*ProposedLogEntry) Descriptor() ([]byte, []int) {
	return file_pkg_types_types_proto_rawDescGZIP(), []int{0}
}

func (m *ProposedLogEntry) GetProposedLogEntry() isProposedLogEntry_ProposedLogEntry {
	if m != nil {
		return m.ProposedLogEntry
	}
	return nil
}

func (x *ProposedLogEntry) GetProposedHashedRekord() *hashedrekord.ProposedHashedRekord {
	if x, ok := x.GetProposedLogEntry().(*ProposedLogEntry_ProposedHashedRekord); ok {
		return x.ProposedHashedRekord
	}
	return nil
}

func (x *ProposedLogEntry) GetProposedRekord() *rekord.ProposedRekord {
	if x, ok := x.GetProposedLogEntry().(*ProposedLogEntry_ProposedRekord); ok {
		return x.ProposedRekord
	}
	return nil
}

func (x *ProposedLogEntry) GetProposedAlpinePackage() *alpine.ProposedAlpinePackage {
	if x, ok := x.GetProposedLogEntry().(*ProposedLogEntry_ProposedAlpinePackage); ok {
		return x.ProposedAlpinePackage
	}
	return nil
}

func (x *ProposedLogEntry) GetProposedHelmChart() *helm.ProposedHelmChart {
	if x, ok := x.GetProposedLogEntry().(*ProposedLogEntry_ProposedHelmChart); ok {
		return x.ProposedHelmChart
	}
	return nil
}

func (x *ProposedLogEntry) GetProposedJar() *jar.ProposedJAR {
	if x, ok := x.GetProposedLogEntry().(*ProposedLogEntry_ProposedJar); ok {
		return x.ProposedJar
	}
	return nil
}

func (x *ProposedLogEntry) GetProposedTimestampResponse() *rfc3161.ProposedTimestampResponse {
	if x, ok := x.GetProposedLogEntry().(*ProposedLogEntry_ProposedTimestampResponse); ok {
		return x.ProposedTimestampResponse
	}
	return nil
}

func (x *ProposedLogEntry) GetProposedRpmPackage() *rpm.ProposedRPMPackage {
	if x, ok := x.GetProposedLogEntry().(*ProposedLogEntry_ProposedRpmPackage); ok {
		return x.ProposedRpmPackage
	}
	return nil
}

func (x *ProposedLogEntry) GetProposedTufMetadata() *tuf.ProposedTUFMetadata {
	if x, ok := x.GetProposedLogEntry().(*ProposedLogEntry_ProposedTufMetadata); ok {
		return x.ProposedTufMetadata
	}
	return nil
}

type isProposedLogEntry_ProposedLogEntry interface {
	isProposedLogEntry_ProposedLogEntry()
}

type ProposedLogEntry_ProposedHashedRekord struct {
	ProposedHashedRekord *hashedrekord.ProposedHashedRekord `protobuf:"bytes,1,opt,name=proposed_hashed_rekord,json=proposedHashedRekord,proto3,oneof"`
}

type ProposedLogEntry_ProposedRekord struct {
	ProposedRekord *rekord.ProposedRekord `protobuf:"bytes,2,opt,name=proposed_rekord,json=proposedRekord,proto3,oneof"`
}

type ProposedLogEntry_ProposedAlpinePackage struct {
	ProposedAlpinePackage *alpine.ProposedAlpinePackage `protobuf:"bytes,3,opt,name=proposed_alpine_package,json=proposedAlpinePackage,proto3,oneof"`
}

type ProposedLogEntry_ProposedHelmChart struct {
	ProposedHelmChart *helm.ProposedHelmChart `protobuf:"bytes,4,opt,name=proposed_helm_chart,json=proposedHelmChart,proto3,oneof"`
}

type ProposedLogEntry_ProposedJar struct {
	ProposedJar *jar.ProposedJAR `protobuf:"bytes,5,opt,name=proposed_jar,json=proposedJar,proto3,oneof"`
}

type ProposedLogEntry_ProposedTimestampResponse struct {
	ProposedTimestampResponse *rfc3161.ProposedTimestampResponse `protobuf:"bytes,6,opt,name=proposed_timestamp_response,json=proposedTimestampResponse,proto3,oneof"`
}

type ProposedLogEntry_ProposedRpmPackage struct {
	ProposedRpmPackage *rpm.ProposedRPMPackage `protobuf:"bytes,7,opt,name=proposed_rpm_package,json=proposedRpmPackage,proto3,oneof"`
}

type ProposedLogEntry_ProposedTufMetadata struct {
	ProposedTufMetadata *tuf.ProposedTUFMetadata `protobuf:"bytes,8,opt,name=proposed_tuf_metadata,json=proposedTufMetadata,proto3,oneof"`
}

func (*ProposedLogEntry_ProposedHashedRekord) isProposedLogEntry_ProposedLogEntry() {}

func (*ProposedLogEntry_ProposedRekord) isProposedLogEntry_ProposedLogEntry() {}

func (*ProposedLogEntry_ProposedAlpinePackage) isProposedLogEntry_ProposedLogEntry() {}

func (*ProposedLogEntry_ProposedHelmChart) isProposedLogEntry_ProposedLogEntry() {}

func (*ProposedLogEntry_ProposedJar) isProposedLogEntry_ProposedLogEntry() {}

func (*ProposedLogEntry_ProposedTimestampResponse) isProposedLogEntry_ProposedLogEntry() {}

func (*ProposedLogEntry_ProposedRpmPackage) isProposedLogEntry_ProposedLogEntry() {}

func (*ProposedLogEntry_ProposedTufMetadata) isProposedLogEntry_ProposedLogEntry() {}

type TypedEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//
	// Actual bytes as persisted in transparency log; we provide this separately
	// due to the potential for changes in marshalling behavior across systems and
	// protocols
	//
	// persisted_entry should be a JSON object that was canonicalized according to RFC8785
	PersistedEntry []byte `protobuf:"bytes,1,opt,name=persisted_entry,json=persistedEntry,proto3" json:"persisted_entry,omitempty"`
	// Types that are assignable to TypedEntry:
	//	*TypedEntry_HashedRekord
	//	*TypedEntry_Rekord
	//	*TypedEntry_AlpinePackage
	//	*TypedEntry_HelmChart
	//	*TypedEntry_Jar
	//	*TypedEntry_TimestampResponse
	//	*TypedEntry_RpmPackage
	//	*TypedEntry_TufMetadata
	TypedEntry isTypedEntry_TypedEntry `protobuf_oneof:"typed_entry"`
}

func (x *TypedEntry) Reset() {
	*x = TypedEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_types_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypedEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypedEntry) ProtoMessage() {}

func (x *TypedEntry) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_types_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypedEntry.ProtoReflect.Descriptor instead.
func (*TypedEntry) Descriptor() ([]byte, []int) {
	return file_pkg_types_types_proto_rawDescGZIP(), []int{1}
}

func (x *TypedEntry) GetPersistedEntry() []byte {
	if x != nil {
		return x.PersistedEntry
	}
	return nil
}

func (m *TypedEntry) GetTypedEntry() isTypedEntry_TypedEntry {
	if m != nil {
		return m.TypedEntry
	}
	return nil
}

func (x *TypedEntry) GetHashedRekord() *hashedrekord.HashedRekord {
	if x, ok := x.GetTypedEntry().(*TypedEntry_HashedRekord); ok {
		return x.HashedRekord
	}
	return nil
}

func (x *TypedEntry) GetRekord() *rekord.Rekord {
	if x, ok := x.GetTypedEntry().(*TypedEntry_Rekord); ok {
		return x.Rekord
	}
	return nil
}

func (x *TypedEntry) GetAlpinePackage() *alpine.AlpinePackage {
	if x, ok := x.GetTypedEntry().(*TypedEntry_AlpinePackage); ok {
		return x.AlpinePackage
	}
	return nil
}

func (x *TypedEntry) GetHelmChart() *helm.HelmChart {
	if x, ok := x.GetTypedEntry().(*TypedEntry_HelmChart); ok {
		return x.HelmChart
	}
	return nil
}

func (x *TypedEntry) GetJar() *jar.JAR {
	if x, ok := x.GetTypedEntry().(*TypedEntry_Jar); ok {
		return x.Jar
	}
	return nil
}

func (x *TypedEntry) GetTimestampResponse() *rfc3161.TimestampResponse {
	if x, ok := x.GetTypedEntry().(*TypedEntry_TimestampResponse); ok {
		return x.TimestampResponse
	}
	return nil
}

func (x *TypedEntry) GetRpmPackage() *rpm.RPMPackage {
	if x, ok := x.GetTypedEntry().(*TypedEntry_RpmPackage); ok {
		return x.RpmPackage
	}
	return nil
}

func (x *TypedEntry) GetTufMetadata() *tuf.TUFMetadata {
	if x, ok := x.GetTypedEntry().(*TypedEntry_TufMetadata); ok {
		return x.TufMetadata
	}
	return nil
}

type isTypedEntry_TypedEntry interface {
	isTypedEntry_TypedEntry()
}

type TypedEntry_HashedRekord struct {
	HashedRekord *hashedrekord.HashedRekord `protobuf:"bytes,2,opt,name=hashed_rekord,json=hashedRekord,proto3,oneof"`
}

type TypedEntry_Rekord struct {
	Rekord *rekord.Rekord `protobuf:"bytes,3,opt,name=rekord,proto3,oneof"`
}

type TypedEntry_AlpinePackage struct {
	AlpinePackage *alpine.AlpinePackage `protobuf:"bytes,4,opt,name=alpine_package,json=alpinePackage,proto3,oneof"`
}

type TypedEntry_HelmChart struct {
	HelmChart *helm.HelmChart `protobuf:"bytes,5,opt,name=helm_chart,json=helmChart,proto3,oneof"`
}

type TypedEntry_Jar struct {
	Jar *jar.JAR `protobuf:"bytes,6,opt,name=jar,proto3,oneof"`
}

type TypedEntry_TimestampResponse struct {
	TimestampResponse *rfc3161.TimestampResponse `protobuf:"bytes,7,opt,name=timestamp_response,json=timestampResponse,proto3,oneof"`
}

type TypedEntry_RpmPackage struct {
	RpmPackage *rpm.RPMPackage `protobuf:"bytes,8,opt,name=rpm_package,json=rpmPackage,proto3,oneof"`
}

type TypedEntry_TufMetadata struct {
	TufMetadata *tuf.TUFMetadata `protobuf:"bytes,9,opt,name=tuf_metadata,json=tufMetadata,proto3,oneof"`
}

func (*TypedEntry_HashedRekord) isTypedEntry_TypedEntry() {}

func (*TypedEntry_Rekord) isTypedEntry_TypedEntry() {}

func (*TypedEntry_AlpinePackage) isTypedEntry_TypedEntry() {}

func (*TypedEntry_HelmChart) isTypedEntry_TypedEntry() {}

func (*TypedEntry_Jar) isTypedEntry_TypedEntry() {}

func (*TypedEntry_TimestampResponse) isTypedEntry_TypedEntry() {}

func (*TypedEntry_RpmPackage) isTypedEntry_TypedEntry() {}

func (*TypedEntry_TufMetadata) isTypedEntry_TypedEntry() {}

var File_pkg_types_types_proto protoreflect.FileDescriptor

var file_pkg_types_types_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x1a, 0x29, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64,
	0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6b,
	0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x2f, 0x72,
	0x65, 0x6b, 0x6f, 0x72, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x70, 0x6b, 0x67,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x61, 0x6c, 0x70, 0x69, 0x6e, 0x65, 0x2f, 0x61, 0x6c,
	0x70, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x70, 0x6b, 0x67, 0x2f,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x2f, 0x68, 0x65, 0x6c, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2f, 0x6a, 0x61, 0x72, 0x2f, 0x6a, 0x61, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x66, 0x63, 0x33, 0x31, 0x36,
	0x31, 0x2f, 0x72, 0x66, 0x63, 0x33, 0x31, 0x36, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x72, 0x70, 0x6d, 0x2f, 0x72,
	0x70, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70, 0x6b, 0x67, 0x2f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2f, 0x74, 0x75, 0x66, 0x2f, 0x74, 0x75, 0x66, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xed, 0x06, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4c, 0x6f,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x73, 0x0a, 0x16, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x2e, 0x50,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x6b,
	0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x14, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x65, 0x64, 0x52, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x52,
	0x65, 0x6b, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65,
	0x64, 0x52, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x12, 0x70, 0x0a, 0x17, 0x70, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x5f, 0x61, 0x6c, 0x70, 0x69, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x36, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73,
	0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x61, 0x6c, 0x70, 0x69, 0x6e, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f,
	0x73, 0x65, 0x64, 0x41, 0x6c, 0x70, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x41, 0x6c, 0x70, 0x69,
	0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x70, 0x72, 0x6f,
	0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x48,
	0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48, 0x00, 0x52, 0x11, 0x70, 0x72, 0x6f, 0x70,
	0x6f, 0x73, 0x65, 0x64, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x4e, 0x0a,
	0x0c, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x6a, 0x61, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x6a,
	0x61, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4a, 0x41, 0x52, 0x48, 0x00,
	0x52, 0x0b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x4a, 0x61, 0x72, 0x12, 0x7d, 0x0a,
	0x1b, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x72, 0x66,
	0x63, 0x33, 0x31, 0x36, 0x31, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x19, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x64, 0x0a, 0x14,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x72, 0x70, 0x6d, 0x5f, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x64, 0x65, 0x76,
	0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73,
	0x65, 0x64, 0x52, 0x50, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x12,
	0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x52, 0x70, 0x6d, 0x50, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x12, 0x67, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x75, 0x66, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x31, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x74, 0x75, 0x66,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x54, 0x55, 0x46, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x13, 0x70, 0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64,
	0x54, 0x75, 0x66, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x14, 0x0a, 0x12, 0x70,
	0x72, 0x6f, 0x70, 0x6f, 0x73, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x67, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x22, 0xc1, 0x05, 0x0a, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x64, 0x5f, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x5a, 0x0a, 0x0d, 0x68, 0x61, 0x73,
	0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x68, 0x61, 0x73, 0x68,
	0x65, 0x64, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52,
	0x65, 0x6b, 0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x68, 0x65, 0x64, 0x52,
	0x65, 0x6b, 0x6f, 0x72, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x48, 0x00,
	0x52, 0x06, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x64, 0x12, 0x57, 0x0a, 0x0e, 0x61, 0x6c, 0x70, 0x69,
	0x6e, 0x65, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x61, 0x6c, 0x70, 0x69,
	0x6e, 0x65, 0x2e, 0x41, 0x6c, 0x70, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x48, 0x00, 0x52, 0x0d, 0x61, 0x6c, 0x70, 0x69, 0x6e, 0x65, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x12, 0x49, 0x0a, 0x0a, 0x68, 0x65, 0x6c, 0x6d, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x68, 0x65, 0x6c, 0x6d, 0x2e, 0x48, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x48,
	0x00, 0x52, 0x09, 0x68, 0x65, 0x6c, 0x6d, 0x43, 0x68, 0x61, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x03,
	0x6a, 0x61, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x6a, 0x61, 0x72, 0x2e, 0x4a, 0x41, 0x52, 0x48, 0x00, 0x52, 0x03,
	0x6a, 0x61, 0x72, 0x12, 0x64, 0x0a, 0x12, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72,
	0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x72, 0x66, 0x63, 0x33, 0x31,
	0x36, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x11, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0b, 0x72, 0x70, 0x6d,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65,
	0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x72, 0x70, 0x6d, 0x2e, 0x52, 0x50,
	0x4d, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x72, 0x70, 0x6d, 0x50,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x4e, 0x0a, 0x0c, 0x74, 0x75, 0x66, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x64,
	0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f,
	0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x74, 0x75, 0x66, 0x2e, 0x54, 0x55, 0x46, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x75, 0x66, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x0d, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f,
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x60, 0x0a, 0x18, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x42, 0x0a, 0x54, 0x79, 0x70, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x73,
	0x74, 0x6f, 0x72, 0x65, 0x2f, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_types_types_proto_rawDescOnce sync.Once
	file_pkg_types_types_proto_rawDescData = file_pkg_types_types_proto_rawDesc
)

func file_pkg_types_types_proto_rawDescGZIP() []byte {
	file_pkg_types_types_proto_rawDescOnce.Do(func() {
		file_pkg_types_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_types_types_proto_rawDescData)
	})
	return file_pkg_types_types_proto_rawDescData
}

var file_pkg_types_types_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_pkg_types_types_proto_goTypes = []interface{}{
	(*ProposedLogEntry)(nil),                  // 0: dev.sigstore.rekor.types.ProposedLogEntry
	(*TypedEntry)(nil),                        // 1: dev.sigstore.rekor.types.TypedEntry
	(*hashedrekord.ProposedHashedRekord)(nil), // 2: dev.sigstore.rekor.types.hashedrekord.ProposedHashedRekord
	(*rekord.ProposedRekord)(nil),             // 3: dev.sigstore.rekor.types.rekord.ProposedRekord
	(*alpine.ProposedAlpinePackage)(nil),      // 4: dev.sigstore.rekor.types.alpine.ProposedAlpinePackage
	(*helm.ProposedHelmChart)(nil),            // 5: dev.sigstore.rekor.types.helm.ProposedHelmChart
	(*jar.ProposedJAR)(nil),                   // 6: dev.sigstore.rekor.types.jar.ProposedJAR
	(*rfc3161.ProposedTimestampResponse)(nil), // 7: dev.sigstore.rekor.types.rfc3161.ProposedTimestampResponse
	(*rpm.ProposedRPMPackage)(nil),            // 8: dev.sigstore.rekor.types.rpm.ProposedRPMPackage
	(*tuf.ProposedTUFMetadata)(nil),           // 9: dev.sigstore.rekor.types.tuf.ProposedTUFMetadata
	(*hashedrekord.HashedRekord)(nil),         // 10: dev.sigstore.rekor.types.hashedrekord.HashedRekord
	(*rekord.Rekord)(nil),                     // 11: dev.sigstore.rekor.types.rekord.Rekord
	(*alpine.AlpinePackage)(nil),              // 12: dev.sigstore.rekor.types.alpine.AlpinePackage
	(*helm.HelmChart)(nil),                    // 13: dev.sigstore.rekor.types.helm.HelmChart
	(*jar.JAR)(nil),                           // 14: dev.sigstore.rekor.types.jar.JAR
	(*rfc3161.TimestampResponse)(nil),         // 15: dev.sigstore.rekor.types.rfc3161.TimestampResponse
	(*rpm.RPMPackage)(nil),                    // 16: dev.sigstore.rekor.types.rpm.RPMPackage
	(*tuf.TUFMetadata)(nil),                   // 17: dev.sigstore.rekor.types.tuf.TUFMetadata
}
var file_pkg_types_types_proto_depIdxs = []int32{
	2,  // 0: dev.sigstore.rekor.types.ProposedLogEntry.proposed_hashed_rekord:type_name -> dev.sigstore.rekor.types.hashedrekord.ProposedHashedRekord
	3,  // 1: dev.sigstore.rekor.types.ProposedLogEntry.proposed_rekord:type_name -> dev.sigstore.rekor.types.rekord.ProposedRekord
	4,  // 2: dev.sigstore.rekor.types.ProposedLogEntry.proposed_alpine_package:type_name -> dev.sigstore.rekor.types.alpine.ProposedAlpinePackage
	5,  // 3: dev.sigstore.rekor.types.ProposedLogEntry.proposed_helm_chart:type_name -> dev.sigstore.rekor.types.helm.ProposedHelmChart
	6,  // 4: dev.sigstore.rekor.types.ProposedLogEntry.proposed_jar:type_name -> dev.sigstore.rekor.types.jar.ProposedJAR
	7,  // 5: dev.sigstore.rekor.types.ProposedLogEntry.proposed_timestamp_response:type_name -> dev.sigstore.rekor.types.rfc3161.ProposedTimestampResponse
	8,  // 6: dev.sigstore.rekor.types.ProposedLogEntry.proposed_rpm_package:type_name -> dev.sigstore.rekor.types.rpm.ProposedRPMPackage
	9,  // 7: dev.sigstore.rekor.types.ProposedLogEntry.proposed_tuf_metadata:type_name -> dev.sigstore.rekor.types.tuf.ProposedTUFMetadata
	10, // 8: dev.sigstore.rekor.types.TypedEntry.hashed_rekord:type_name -> dev.sigstore.rekor.types.hashedrekord.HashedRekord
	11, // 9: dev.sigstore.rekor.types.TypedEntry.rekord:type_name -> dev.sigstore.rekor.types.rekord.Rekord
	12, // 10: dev.sigstore.rekor.types.TypedEntry.alpine_package:type_name -> dev.sigstore.rekor.types.alpine.AlpinePackage
	13, // 11: dev.sigstore.rekor.types.TypedEntry.helm_chart:type_name -> dev.sigstore.rekor.types.helm.HelmChart
	14, // 12: dev.sigstore.rekor.types.TypedEntry.jar:type_name -> dev.sigstore.rekor.types.jar.JAR
	15, // 13: dev.sigstore.rekor.types.TypedEntry.timestamp_response:type_name -> dev.sigstore.rekor.types.rfc3161.TimestampResponse
	16, // 14: dev.sigstore.rekor.types.TypedEntry.rpm_package:type_name -> dev.sigstore.rekor.types.rpm.RPMPackage
	17, // 15: dev.sigstore.rekor.types.TypedEntry.tuf_metadata:type_name -> dev.sigstore.rekor.types.tuf.TUFMetadata
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_pkg_types_types_proto_init() }
func file_pkg_types_types_proto_init() {
	if File_pkg_types_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_types_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProposedLogEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_types_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypedEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_types_types_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ProposedLogEntry_ProposedHashedRekord)(nil),
		(*ProposedLogEntry_ProposedRekord)(nil),
		(*ProposedLogEntry_ProposedAlpinePackage)(nil),
		(*ProposedLogEntry_ProposedHelmChart)(nil),
		(*ProposedLogEntry_ProposedJar)(nil),
		(*ProposedLogEntry_ProposedTimestampResponse)(nil),
		(*ProposedLogEntry_ProposedRpmPackage)(nil),
		(*ProposedLogEntry_ProposedTufMetadata)(nil),
	}
	file_pkg_types_types_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*TypedEntry_HashedRekord)(nil),
		(*TypedEntry_Rekord)(nil),
		(*TypedEntry_AlpinePackage)(nil),
		(*TypedEntry_HelmChart)(nil),
		(*TypedEntry_Jar)(nil),
		(*TypedEntry_TimestampResponse)(nil),
		(*TypedEntry_RpmPackage)(nil),
		(*TypedEntry_TufMetadata)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_types_types_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pkg_types_types_proto_goTypes,
		DependencyIndexes: file_pkg_types_types_proto_depIdxs,
		MessageInfos:      file_pkg_types_types_proto_msgTypes,
	}.Build()
	File_pkg_types_types_proto = out.File
	file_pkg_types_types_proto_rawDesc = nil
	file_pkg_types_types_proto_goTypes = nil
	file_pkg_types_types_proto_depIdxs = nil
}
