// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TimestampClient is the client API for Timestamp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TimestampClient interface {
	//*
	// Returns information about the current state of the transparency log
	CreateTimestamp(ctx context.Context, in *CreateTimestampRequest, opts ...grpc.CallOption) (*TimestampResponse, error)
	//*
	// Returns the public key that can be used to validate the signed tree head
	GetTimestampTrustBundle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimestampTrustBundle, error)
}

type timestampClient struct {
	cc grpc.ClientConnInterface
}

func NewTimestampClient(cc grpc.ClientConnInterface) TimestampClient {
	return &timestampClient{cc}
}

func (c *timestampClient) CreateTimestamp(ctx context.Context, in *CreateTimestampRequest, opts ...grpc.CallOption) (*TimestampResponse, error) {
	out := new(TimestampResponse)
	err := c.cc.Invoke(ctx, "/dev.sigstore.rekor.v2.Timestamp/CreateTimestamp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *timestampClient) GetTimestampTrustBundle(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*TimestampTrustBundle, error) {
	out := new(TimestampTrustBundle)
	err := c.cc.Invoke(ctx, "/dev.sigstore.rekor.v2.Timestamp/GetTimestampTrustBundle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TimestampServer is the server API for Timestamp service.
// All implementations must embed UnimplementedTimestampServer
// for forward compatibility
type TimestampServer interface {
	//*
	// Returns information about the current state of the transparency log
	CreateTimestamp(context.Context, *CreateTimestampRequest) (*TimestampResponse, error)
	//*
	// Returns the public key that can be used to validate the signed tree head
	GetTimestampTrustBundle(context.Context, *empty.Empty) (*TimestampTrustBundle, error)
	mustEmbedUnimplementedTimestampServer()
}

// UnimplementedTimestampServer must be embedded to have forward compatible implementations.
type UnimplementedTimestampServer struct {
}

func (UnimplementedTimestampServer) CreateTimestamp(context.Context, *CreateTimestampRequest) (*TimestampResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTimestamp not implemented")
}
func (UnimplementedTimestampServer) GetTimestampTrustBundle(context.Context, *empty.Empty) (*TimestampTrustBundle, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimestampTrustBundle not implemented")
}
func (UnimplementedTimestampServer) mustEmbedUnimplementedTimestampServer() {}

// UnsafeTimestampServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TimestampServer will
// result in compilation errors.
type UnsafeTimestampServer interface {
	mustEmbedUnimplementedTimestampServer()
}

func RegisterTimestampServer(s grpc.ServiceRegistrar, srv TimestampServer) {
	s.RegisterService(&Timestamp_ServiceDesc, srv)
}

func _Timestamp_CreateTimestamp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTimestampRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimestampServer).CreateTimestamp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.sigstore.rekor.v2.Timestamp/CreateTimestamp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimestampServer).CreateTimestamp(ctx, req.(*CreateTimestampRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Timestamp_GetTimestampTrustBundle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TimestampServer).GetTimestampTrustBundle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dev.sigstore.rekor.v2.Timestamp/GetTimestampTrustBundle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TimestampServer).GetTimestampTrustBundle(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Timestamp_ServiceDesc is the grpc.ServiceDesc for Timestamp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Timestamp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dev.sigstore.rekor.v2.Timestamp",
	HandlerType: (*TimestampServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTimestamp",
			Handler:    _Timestamp_CreateTimestamp_Handler,
		},
		{
			MethodName: "GetTimestampTrustBundle",
			Handler:    _Timestamp_GetTimestampTrustBundle_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rekor_timestamp.proto",
}
