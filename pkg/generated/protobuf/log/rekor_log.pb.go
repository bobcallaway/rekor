//
// Copyright 2022 The Sigstore Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: rekor_log.proto

package log

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LogInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash       string `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"`             // The current hash value stored at the root of the merkle tree
	TreeSize       uint64 `protobuf:"varint,2,opt,name=treeSize,proto3" json:"treeSize,omitempty"`            // The current number of nodes in the merkle tree
	SignedTreeHead []byte `protobuf:"bytes,3,opt,name=signedTreeHead,proto3" json:"signedTreeHead,omitempty"` // The current signed tree head
	TreeID         uint64 `protobuf:"varint,4,opt,name=treeID,proto3" json:"treeID,omitempty"`                // The current tree ID
}

func (x *LogInfoResponse) Reset() {
	*x = LogInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rekor_log_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogInfoResponse) ProtoMessage() {}

func (x *LogInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_log_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogInfoResponse.ProtoReflect.Descriptor instead.
func (*LogInfoResponse) Descriptor() ([]byte, []int) {
	return file_rekor_log_proto_rawDescGZIP(), []int{0}
}

func (x *LogInfoResponse) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *LogInfoResponse) GetTreeSize() uint64 {
	if x != nil {
		return x.TreeSize
	}
	return 0
}

func (x *LogInfoResponse) GetSignedTreeHead() []byte {
	if x != nil {
		return x.SignedTreeHead
	}
	return nil
}

func (x *LogInfoResponse) GetTreeID() uint64 {
	if x != nil {
		return x.TreeID
	}
	return 0
}

type PublicKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=publicKey,proto3" json:"publicKey,omitempty"` // The public key that can verify signatures of the tree head
}

func (x *PublicKeyResponse) Reset() {
	*x = PublicKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rekor_log_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicKeyResponse) ProtoMessage() {}

func (x *PublicKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_log_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicKeyResponse.ProtoReflect.Descriptor instead.
func (*PublicKeyResponse) Descriptor() ([]byte, []int) {
	return file_rekor_log_proto_rawDescGZIP(), []int{1}
}

func (x *PublicKeyResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type ConsistencyProofRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// The size of the tree that you wish to prove consistency from;
	// (1 means the beginning of the log); defaults to 1 if not specified
	FirstSize uint64 `protobuf:"varint,1,opt,name=firstSize,proto3" json:"firstSize,omitempty"` //[(validate.rules).uint64.gte = 1 ];
	LastSize  uint64 `protobuf:"varint,2,opt,name=lastSize,proto3" json:"lastSize,omitempty"`   // The size of the tree that you wish to prove consistency to
}

func (x *ConsistencyProofRequest) Reset() {
	*x = ConsistencyProofRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rekor_log_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistencyProofRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyProofRequest) ProtoMessage() {}

func (x *ConsistencyProofRequest) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_log_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyProofRequest.ProtoReflect.Descriptor instead.
func (*ConsistencyProofRequest) Descriptor() ([]byte, []int) {
	return file_rekor_log_proto_rawDescGZIP(), []int{2}
}

func (x *ConsistencyProofRequest) GetFirstSize() uint64 {
	if x != nil {
		return x.FirstSize
	}
	return 0
}

func (x *ConsistencyProofRequest) GetLastSize() uint64 {
	if x != nil {
		return x.LastSize
	}
	return 0
}

type ConsistencyProofResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootHash string   `protobuf:"bytes,1,opt,name=rootHash,proto3" json:"rootHash,omitempty"` // The hash value stored at the root of the merkle tree at the time the proof was generated
	Hashes   []string `protobuf:"bytes,2,rep,name=hashes,proto3" json:"hashes,omitempty"`     // The list of hashes required to compute the inclusion proof
}

func (x *ConsistencyProofResponse) Reset() {
	*x = ConsistencyProofResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rekor_log_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsistencyProofResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyProofResponse) ProtoMessage() {}

func (x *ConsistencyProofResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_log_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyProofResponse.ProtoReflect.Descriptor instead.
func (*ConsistencyProofResponse) Descriptor() ([]byte, []int) {
	return file_rekor_log_proto_rawDescGZIP(), []int{3}
}

func (x *ConsistencyProofResponse) GetRootHash() string {
	if x != nil {
		return x.RootHash
	}
	return ""
}

func (x *ConsistencyProofResponse) GetHashes() []string {
	if x != nil {
		return x.Hashes
	}
	return nil
}

type VersionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version   string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`     // The version string for the running instance of Rekor
	Commit    string `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`       // The git commit from which the running instance of Rekor was built
	Treestate string `protobuf:"bytes,3,opt,name=treestate,proto3" json:"treestate,omitempty"` // The state of the git tree when this Rekor instance was built
	Builddate string `protobuf:"bytes,4,opt,name=builddate,proto3" json:"builddate,omitempty"` // The date which this Rekor instance was compiled
}

func (x *VersionResponse) Reset() {
	*x = VersionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rekor_log_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VersionResponse) ProtoMessage() {}

func (x *VersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_rekor_log_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VersionResponse.ProtoReflect.Descriptor instead.
func (*VersionResponse) Descriptor() ([]byte, []int) {
	return file_rekor_log_proto_rawDescGZIP(), []int{4}
}

func (x *VersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *VersionResponse) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *VersionResponse) GetTreestate() string {
	if x != nil {
		return x.Treestate
	}
	return ""
}

func (x *VersionResponse) GetBuilddate() string {
	if x != nil {
		return x.Builddate
	}
	return ""
}

var File_rekor_log_proto protoreflect.FileDescriptor

var file_rekor_log_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x5f, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e,
	0x72, 0x65, 0x6b, 0x6f, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x0f, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61,
	0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x72, 0x65, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72, 0x65, 0x65, 0x48, 0x65, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x54, 0x72,
	0x65, 0x65, 0x48, 0x65, 0x61, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x72, 0x65, 0x65, 0x49, 0x44, 0x22, 0x31,
	0x0a, 0x11, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x22, 0x53, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09,
	0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6c, 0x61,
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0x4e, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x61, 0x73, 0x68, 0x65, 0x73, 0x22, 0x7f, 0x0a, 0x0f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x74,
	0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x72, 0x65, 0x65, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x64, 0x61, 0x74, 0x65, 0x32, 0xcd, 0x02, 0x0a, 0x03, 0x4c, 0x6f, 0x67, 0x12,
	0x43, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x23, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72,
	0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x4c, 0x6f, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x64, 0x65, 0x76, 0x2e,
	0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x6d, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50,
	0x72, 0x6f, 0x6f, 0x66, 0x12, 0x2b, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74,
	0x6f, 0x72, 0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2c, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x46, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x23, 0x2e, 0x64, 0x65, 0x76, 0x2e, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x2e, 0x72, 0x65, 0x6b, 0x6f, 0x72, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x67, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x72,
	0x65, 0x6b, 0x6f, 0x72, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x6c, 0x6f, 0x67, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rekor_log_proto_rawDescOnce sync.Once
	file_rekor_log_proto_rawDescData = file_rekor_log_proto_rawDesc
)

func file_rekor_log_proto_rawDescGZIP() []byte {
	file_rekor_log_proto_rawDescOnce.Do(func() {
		file_rekor_log_proto_rawDescData = protoimpl.X.CompressGZIP(file_rekor_log_proto_rawDescData)
	})
	return file_rekor_log_proto_rawDescData
}

var file_rekor_log_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_rekor_log_proto_goTypes = []interface{}{
	(*LogInfoResponse)(nil),          // 0: dev.sigstore.rekor.LogInfoResponse
	(*PublicKeyResponse)(nil),        // 1: dev.sigstore.rekor.PublicKeyResponse
	(*ConsistencyProofRequest)(nil),  // 2: dev.sigstore.rekor.ConsistencyProofRequest
	(*ConsistencyProofResponse)(nil), // 3: dev.sigstore.rekor.ConsistencyProofResponse
	(*VersionResponse)(nil),          // 4: dev.sigstore.rekor.VersionResponse
	(*emptypb.Empty)(nil),            // 5: google.protobuf.Empty
}
var file_rekor_log_proto_depIdxs = []int32{
	5, // 0: dev.sigstore.rekor.Log.Info:input_type -> google.protobuf.Empty
	5, // 1: dev.sigstore.rekor.Log.PublicKey:input_type -> google.protobuf.Empty
	2, // 2: dev.sigstore.rekor.Log.ConsistencyProof:input_type -> dev.sigstore.rekor.ConsistencyProofRequest
	5, // 3: dev.sigstore.rekor.Log.Version:input_type -> google.protobuf.Empty
	0, // 4: dev.sigstore.rekor.Log.Info:output_type -> dev.sigstore.rekor.LogInfoResponse
	1, // 5: dev.sigstore.rekor.Log.PublicKey:output_type -> dev.sigstore.rekor.PublicKeyResponse
	3, // 6: dev.sigstore.rekor.Log.ConsistencyProof:output_type -> dev.sigstore.rekor.ConsistencyProofResponse
	4, // 7: dev.sigstore.rekor.Log.Version:output_type -> dev.sigstore.rekor.VersionResponse
	4, // [4:8] is the sub-list for method output_type
	0, // [0:4] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_rekor_log_proto_init() }
func file_rekor_log_proto_init() {
	if File_rekor_log_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rekor_log_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rekor_log_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PublicKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rekor_log_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsistencyProofRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rekor_log_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsistencyProofResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rekor_log_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VersionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rekor_log_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rekor_log_proto_goTypes,
		DependencyIndexes: file_rekor_log_proto_depIdxs,
		MessageInfos:      file_rekor_log_proto_msgTypes,
	}.Build()
	File_rekor_log_proto = out.File
	file_rekor_log_proto_rawDesc = nil
	file_rekor_log_proto_goTypes = nil
	file_rekor_log_proto_depIdxs = nil
}
